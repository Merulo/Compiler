    for(size_t i = 0; i < regToChange.size(); i++)
    {
        std::cout<<"\t\tshould save "<<regToChange[i]<<std::endl;
        prepareRegisterWithoutLoading(p.registerBlock, regToChange[i], tmp, regTargeted[i].variableName);

        // std::cout<<"\tcomparing "<<regToChange[i] <<" and "<<regTargeted[i]<<std::endl;
        // if (regToChange[i].shouldSave(regTargeted[i]))
        // {
        //     std::cout<<"\t\tshould save "<<regToChange[i]<<std::endl;
        //     prepareRegisterWithoutLoading(p.registerBlock, regToChange[i], tmp, regTargeted[i].variableName);
        // }
        // else if (regToChange[i].state == RegisterState::VARIABLE || regToChange[i].state == RegisterState::CONSTVARIABLE)
        // {
        //     checkVariableIsInOtherRegister(regToChange[i], regTargeted, tmp, p);
        // }
    }

    for(size_t i = 0; i < regToChange.size(); i++)
    {
        std::cout<<"\t\tloading "<<regToChange[i] <<std::endl;
        prepareRegisterWithLoading(p.registerBlock, regToChange[i], tmp, regTargeted[i].variableName, false);

        // std::cout<<"\tcomparing "<<regToChange[i] <<" and "<<regTargeted[i]<<std::endl;
        // if (regToChange[i].shouldSave(regTargeted[i]))
        // {
        //     std::cout<<"\t\tshould load "<<regTargeted[i]<<std::endl;
        //     prepareRegisterWithLoading(p.registerBlock, regToChange[i], tmp, regTargeted[i].variableName, false);
        // }
    }





    auto regs = registerBlock.getRegisters();

    for(auto reg : regs)
    {
        if (reg.state == RegisterState::TABLE)
        {
            std::string var = reg.variableName;
            std::string rest = var.substr(var.find("(") + 1, std::string::npos);
            rest.pop_back();

            if (isDigits(rest))
            {
                prepareRegisterWithoutLoading(registerBlock, reg, resultBlock, "");
                reg.state = RegisterState::UNKNOWN;
            }


        }
    }


